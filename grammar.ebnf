program ::= decl*

decl ::= func_decl

func_decl ::= 'fn' ident '(' func_params ')' block
func_params ::= (ident ',')* ident?

block ::= '{' stmt* '}'

stmt ::= println_stmt | var_decl_stmt | expr_stmt | cond | while_loop | loop_loop
println_stmt ::= 'println' '!' '(' expr ')' ';'
var_decl_stmt ::= 'let' ident '=' expr ';'
expr_stmt ::= expr ';'
while_loop ::= 'while' expr block
loop_loop ::= 'loop' block

expr ::= expr bin_op expr | unary_op expr | assign | group | call | return | cond
         integer_literal | bool_literal | byte_str | 'break' | 'continue' | ident

cond ::= 'if' expr block ('else' 'if' expr block)* ('else' block)?

# The precendence of these operators is defined in the code
bin_op ::= '+' | '-' | '*' | '/' | '%' | '==' | '!=' | '>' | '>=' | '<' | '<=' | '||' | '&&'
unary_op ::= '+' | '-' | '!'
assign ::= lvalue '=' expr
lvalue ::= ident
group ::= '(' expr ')'
call ::= expr '(' func_args ')'
func_args ::= (expr ',')* expr?
return ::= 'return' expr
bool_literal ::= 'true' | 'false'
