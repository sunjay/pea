module ::= decl*

decl ::= func_decl

func_decl ::= 'fn' ident '(' func_params ')' return_ty? block
func_params ::= (func_param ',')* func_param?
func_param ::= ident ':' ty

block ::= '{' stmt* '}'

stmt ::= println_stmt | print_stmt | var_decl_stmt | expr_stmt | cond | while_loop | loop_loop
println_stmt ::= 'println' '!' '(' expr ')' ';'
print_stmt ::= 'print' '!' '(' expr ')' ';'
var_decl_stmt ::= 'let' ident var_decl_ty? '=' expr ';'
var_decl_ty ::= ':' ty
expr_stmt ::= expr ';'
while_loop ::= 'while' expr block
loop_loop ::= 'loop' block

expr ::= expr bin_op expr | unary_op expr | assign | group | call | return | cond | 'break' | 'continue'
         integer_literal | bool_literal | list_literal | bstr_literal | byte_literal | unit_literal | ident

cond ::= 'if' expr block ('else' 'if' expr block)* ('else' block)?

# The precendence of these operators is defined in the code
bin_op ::= '+' | '-' | '*' | '/' | '%' | '==' | '!=' | '>' | '>=' | '<' | '<=' | '||' | '&&' |
           '+=' | '-=' | '*=' | '/=' | '%=' | '.'
unary_op ::= '+' | '-' | '!'
assign ::= lvalue '=' expr
lvalue ::= ident
group ::= '(' expr ')'
call ::= expr '(' func_args ')'
func_args ::= (expr ',')* expr?
return ::= 'return' expr?
bool_literal ::= 'true' | 'false'
list_literal ::= '[' (list_items | list_repeat) ']'
list_items ::= (expr ',')* expr?
list_repeat ::= expr ';' expr
unit_literal ::= '(' ')'

ty ::= unit_ty | list_ty | func_ty | ident
unit_ty ::= '(' ')'
list_ty ::= '[' ty ']'
func_ty ::= 'fn' '(' func_ty_params ')' return_ty?
func_ty_params ::= (ty ',')* ty?
return_ty ::= '->' ty
