use std::mem;
use std::ptr::{self, NonNull};
use std::sync::atomic::{AtomicPtr, Ordering};

/// A linked list of allocations managed by the GC
static ALLOC_LIST: AtomicPtr<GcHeader> = AtomicPtr::new(ptr::null_mut());

/// A single heap allocated entry managed by the GC
#[repr(C)]
struct GcEntry<T> {
    /// A header containing extra metadata needed by the GC
    ///
    /// Due to the `repr(C)` attribute, the address of this header is the same as the address
    /// returned by the heap allocation. This allows headers to be operated on independently from
    /// the type T.
    header: GcHeader,
    /// The actual allocated value
    value: T,
}

#[derive(Debug)]
struct GcHeader {
    /// if true, the allocation is still reachable from a root
    is_reachable: bool,
    /// The address of the previous allocation (makes this an intrusive list node)
    next: *mut GcHeader,
}

impl Default for GcHeader {
    fn default() -> Self {
        Self {
            // Presume not reachable until proven otherwise
            is_reachable: false,
            next: ptr::null_mut(),
        }
    }
}

/// Allocate memory managed by the GC and initialize it to the given value
///
/// Returns a non-null pointer to the value
pub fn alloc<T>(value: T) -> NonNull<T> {
    // To avoid the ABA problem, create the header with a null pointer first, then swap the next
    // ALLOC_LIST pointer with the pointer to this entry in a single operation.
    let mut entry = Box::new(GcEntry {
        header: GcHeader::default(),
        value,
    });
    let header_ptr = &mut entry.header as *mut GcHeader;
    let value_ptr = (&entry.value).into();

    // Append onto the list of all allocations
    let next = ALLOC_LIST.swap(header_ptr, Ordering::SeqCst);
    entry.header.next = next;

    // Make sure the entry is not dropped at the end of this function
    Box::leak(entry);

    value_ptr
}

/// Marks a value managed by the GC as reachable
///
/// # Safety
///
/// This function may only be used with pointers returned from `alloc`.
pub unsafe fn mark<T>(ptr: NonNull<T>) {
    // Safety: Not actually sure if this offset will work. Probably a safer way would be to
    // construct a GcEntry and then find out the actual offset between the `header` and `value`
    // fields.
    let header_ptr = ptr.as_ptr().sub(mem::size_of::<GcHeader>()) as *mut GcHeader;
    // Safety: This is only safe because #[repr(C)] guarantees that the header will be placed before
    // the value in the allocated GcEntry.
    let mut header = &mut *header_ptr;
    header.is_reachable = true;
}

/// Frees the memory associated with the given allocation
///
/// # Safety
///
/// This function may only be used with pointers in `ALLOC_LIST`. Do not call this concurrently with
/// `alloc`.
unsafe fn free(ptr: NonNull<GcHeader>, prev: Option<NonNull<GcHeader>>) {
    // Reconstruct the box that this pointer came from and free the value at the end of this scope
    let header = Box::from_raw(ptr.as_ptr());
    if let Some(mut prev) = prev {
        prev.as_mut().next = header.next;

    // No previous, must be the head of the list
    } else {
        // Set a new head for the list
        //
        // NOTE: This line is not robust and will not work if run concurrently with `alloc`.
        ALLOC_LIST.compare_and_swap(ptr.as_ptr(), header.next, Ordering::SeqCst);
    }
}

struct Traverse {
    next: *mut GcHeader,
}

impl Iterator for Traverse {
    type Item = NonNull<GcHeader>;

    fn next(&mut self) -> Option<Self::Item> {
        match NonNull::new(self.next) {
            Some(ptr) => {
                // Safety: the pointers in ALLOC_LIST should be valid
                let header = unsafe { ptr.as_ref() };
                self.next = header.next;

                Some(ptr)
            },
            None => None,
        }
    }
}

/// Traverses all allocations managed by the GC
fn traverse() -> impl Iterator<Item=NonNull<GcHeader>> {
    Traverse {
        next: ALLOC_LIST.load(Ordering::SeqCst),
    }
}

/// Sweeps/collects all allocations that have been not been marked as reachable
pub fn sweep() {
    let mut prev = None;
    for mut header in traverse() {
        // We need to be careful to keep the lifetime of &GcHeader short so we don't break the
        // aliasing rules when `free` takes ownership of the data.
        let is_reachable = {
            // Safety: the header should be a valid pointer or it would not be in the list.
            let header = unsafe { header.as_mut() };
            let is_reachable = header.is_reachable;

            // Reset `is_reachable` for next collection
            header.is_reachable = false;

            is_reachable
        };

        if is_reachable {
            // Only update prev with the allocations we aren't freeing
            prev = Some(header);
            continue;
        }

        // Safety: pointers generated by `traverse` are guaranteed to be from ALLOC_LIST
        unsafe { free(header, prev); }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    // unsafe test helper for getting the value from a pointer
    fn get<T>(ptr: &NonNull<T>) -> &T {
        unsafe { ptr.as_ref() }
    }

    #[test]
    fn gc_alloc() {
        let ptr1 = alloc(2i8);
        let ptr2 = alloc(42i16);
        let ptr3 = alloc(-33i32);
        let ptr4 = alloc(54i64);
        let ptr5 = alloc(-12931i128);

        // Check that all the values are as we expect
        assert_eq!(*get(&ptr1), 2);
        assert_eq!(*get(&ptr2), 42);
        assert_eq!(*get(&ptr3), -33);
        assert_eq!(*get(&ptr4), 54);
        assert_eq!(*get(&ptr5), -12931);

        // Make sure we don't free marked pointers
        unsafe { mark(ptr2) };
        unsafe { mark(ptr3) };

        sweep();

        assert_eq!(*get(&ptr2), 42);
        assert_eq!(*get(&ptr3), -33);

        // Should clean up all memory at the end
        sweep();

        assert_eq!(ALLOC_LIST.load(Ordering::SeqCst), ptr::null_mut());
    }
}
