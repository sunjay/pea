# https://aka.ms/yaml

strategy:
  matrix:
    windows-stable:
      imageName: 'windows-latest'
      rustup_toolchain: stable
    windows-beta:
      imageName: 'windows-latest'
      rustup_toolchain: beta
    windows-nightly:
      imageName: 'windows-latest'
      rustup_toolchain: nightly

    mac-stable:
      imageName: 'macos-latest'
      rustup_toolchain: stable
    mac-beta:
      imageName: 'macos-latest'
      rustup_toolchain: beta
    mac-nightly:
      imageName: 'macos-latest'
      rustup_toolchain: nightly

    linux-stable:
      imageName: 'ubuntu-latest'
      rustup_toolchain: stable
    linux-beta:
      imageName: 'ubuntu-latest'
      rustup_toolchain: beta
    linux-nightly:
      imageName: 'ubuntu-latest'
      rustup_toolchain: nightly

pool:
  vmImage: $(imageName)

steps:
# Need to remove rust-toolchain or we will always use the version specified
# there regardless of what version is installed
# Also need to set the PATH environment variable
- script: |
    rm rust-toolchain
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
    echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    source $HOME/.cargo/env
    rustc --version --verbose
  displayName: install
  condition: ne( variables['Agent.OS'], 'Windows_NT' )
- script: |
    rm rust-toolchain
    curl -sSf -o rustup-init.exe https://win.rustup.rs
    rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
    echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    rustc --version --verbose
  displayName: install (windows)
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

- script: |
    rustc --version --verbose
    cargo build --verbose --all --all-targets
    cargo test --verbose --all --no-run
  displayName: build

- script: |
    cargo test --verbose --all
  displayName: test
  #TODO: Tests don't run on Windows because of line ending issues
  condition: ne( variables['Agent.OS'], 'Windows_NT' )

# See: https://github.com/rust-lang/miri#running-miri-on-ci
- script: |
    echo "---- START ENV ----"
    env
    echo "---- END ENV ----"
    MIRI_NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)
    echo "Installing latest nightly with Miri: $MIRI_NIGHTLY"
    rustup set profile minimal
    rustup default "$MIRI_NIGHTLY"
    rustup component add miri
    echo "Successfully installed miri on $MIRI_NIGHTLY"

    cargo miri setup

    cargo miri test --verbose --all -- -Zmiri-disable-isolation
  displayName: miri
  condition: and( ne( variables['Agent.OS'], 'Windows_NT' ), eq( variables['rustup_toolchain'], 'nightly' ) )

- script: |
    cargo doc --no-deps --verbose --all
  displayName: docs
