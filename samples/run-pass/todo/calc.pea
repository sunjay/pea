//! This program is a calculator for basic expressions containing
//! the +, -, *, and / operators.

fn main() {
    print_int(calculate(" 1 +  3 "));
    print_int(calculate("-32+64*3"));
}

fn calculate(input: text) -> int {
    let ast = parse(input.as_bytes());
    ast.eval()
}

enum Op {
    Add,
    Sub,
    Mul,
    Div,
}

/// The abstract syntax tree
enum Ast {
    Int(int),
    BinaryOp {
        left: Ast,
        op: Op,
        right: Ast,
    },
}

impl Ast {
    fn eval(self) -> int {
        use Ast::*;
        match self {
            Int(value) => value,
            BinaryOp {left, op, right} => {
                let left = left.eval();
                let right = right.eval();

                use Op::*;
                match op {
                    Add => left + right,
                    Sub => left - right,
                    Mul => left * right,
                    Div => left / right,
                }
            },
        }
    }
}

enum Token {
    Int(int),
    Op(Op),
}

//TODO: Replace with Option type
enum FoundOp {
    Op(Op, [Tokens]),
    None,
}

fn parse(input: [u8]) -> Ast {
    let tokens = lex(input);
    let (node, tokens) = parse_expr(tokens);

    if !tokens.is_empty() {
        panic!("Failed to parse entire input");
    }

    node
}

fn parse_expr(tokens: [Token]) -> (Ast, [Token]) {
    let (left, tokens) = parse_term(tokens);

    loop {
        match parse_add_sub(tokens) {
            FoundOp::Op(op, next_tokens) => {
                let (right, next_tokens) = parse_term(next_tokens);

                left = Ast::BinaryOp { left, op, right };
                tokens = next_tokens;
            },

            FoundOp::None => break,
        }
    }
}

fn parse_term(tokens: [Token]) -> (Ast, [Token]) {
    let (left, tokens) = parse_int(tokens);

    loop {
        match parse_mul_div(tokens) {
            FoundOp::Op(op, next_tokens) => {
                let (right, next_tokens) = parse_int(next_tokens);

                left = Ast::BinaryOp { left, op, right };
                tokens = next_tokens;
            },

            FoundOp::None => break,
        }
    }
}

fn parse_add_sub(tokens: [Token]) -> FoundOp {
    match tokens {
        [Token::Op(Op::Add), rest @ ...] |
        [Token::Op(Op::Sub), rest @ ...] => FoundOp::Op(op, rest),
        _ => FoundOp::None,
    }
}

fn parse_mul_div(tokens: [Token]) -> FoundOp {
    match tokens {
        [Token::Op(Op::Mul), rest @ ...] |
        [Token::Op(Op::Div), rest @ ...] => FoundOp::Op(op, rest),
        _ => FoundOp::None,
    }
}

fn parse_int(tokens: [Token]) -> (Ast, [Token]) {
    match tokens {
        [Token::Int(value), ...rest] => (Ast::Int(value), rest),
        _ => panic!("Invalid input! Expected an int!"),
    }
}

fn lex(input: [u8]) -> [Token] {
    let tokens = [];

    let i = 0uint;
    while i < input.len() {
        // Ignore whitespace
        while i < input.len() && input[i].is_ascii_whitespace() {
            i += 1;
        }

        if i >= input.len() {
            break;
        }

        match input[i] {
            b'0' ..= b'9' => {
                let num_end = i+1;
                while num_end < input.len() && input[num_end].is_ascii_digit() {
                    num_end += 1;
                }

                //TODO: Use a FromStr trait and parse() method
                let num = s[i..num_end].parse_int();
                i = num_end;

                tokens.push(Token::Int(num));
            },

            b'+' => {
                tokens.push(Token::Op(Op::Add));
                i += 1;
            },
            b'-' => {
                tokens.push(Token::Op(Op::Sub));
                i += 1;
            },
            b'*' => {
                tokens.push(Token::Op(Op::Mul));
                i += 1;
            },
            b'/' => {
                tokens.push(Token::Op(Op::Div));
                i += 1;
            },

            _ => {},
        }
    }

    tokens
}
